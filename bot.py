import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import asyncio
from datetime import datetime

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
from dotenv import load_dotenv
import os

load_dotenv()  # –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞

TOKEN = os.getenv("TOKEN")
ADMIN_ID = int(os.getenv("ADMIN_ID"))

bot = Bot(token=TOKEN)
dp = Dispatcher()

# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
orders_db = {}

# ===== –ö–õ–ê–í–ò–ê–¢–£–†–´ =====
def get_main_keyboard(user_id: int):
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å –∫–Ω–æ–ø–∫–∞–º–∏"""
    builder = InlineKeyboardBuilder()
    builder.button(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="list_orders")
    builder.button(text="üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
    if user_id == ADMIN_ID:
        builder.button(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats")
        builder.button(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="add_order_prompt")
    builder.adjust(1)
    return builder.as_markup()

def get_orders_keyboard(order_type: str = "active"):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º –∑–∞–∫–∞–∑–æ–≤"""
    builder = InlineKeyboardBuilder()
    for num, data in orders_db.items():
        if (order_type == "active" and not data['taken']) or \
           (order_type == "taken" and data['taken']):
            builder.button(
                text=f"#{num}: {data['desc'][:15]}...",
                callback_data=f"view_{order_type}_{num}"
            )
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    builder.adjust(1)
    return builder.as_markup()

def get_order_actions_keyboard(order_num: str, is_owner: bool):
    """–î–µ–π—Å—Ç–≤–∏—è —Å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–º –∑–∞–∫–∞–∑–æ–º"""
    builder = InlineKeyboardBuilder()
    if not orders_db[order_num]['taken']:
        builder.button(text="‚úÖ –í–∑—è—Ç—å –∑–∞–∫–∞–∑", callback_data=f"take_{order_num}")
    elif is_owner:
        builder.button(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data=f"cancel_{order_num}")
    builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_orders")
    builder.adjust(1)
    return builder.as_markup()

# ===== –ö–û–ú–ê–ù–î–´ =====
@dp.message(Command("start"))
async def start(message: Message):
    await show_main_menu(message)

async def show_main_menu(message):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å Message –∏ CallbackQuery)"""
    if isinstance(message, CallbackQuery):
        msg = message.message
        edit_method = msg.edit_text
        user_id = message.from_user.id
    else:
        msg = message
        edit_method = msg.answer
        user_id = message.from_user.id

    await edit_method(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:",
        reply_markup=get_main_keyboard(user_id)
    )

# ===== –û–ë–†–ê–ë–û–¢–ö–ê –ö–ù–û–ü–û–ö =====
@dp.callback_query(F.data == "main_menu")
async def main_menu(callback: CallbackQuery):
    await show_main_menu(callback)

@dp.callback_query(F.data == "list_orders")
async def list_orders(callback: CallbackQuery):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    builder = InlineKeyboardBuilder()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ –∑–∞–∫–∞–∑–∞
    active_orders = False
    for num, data in orders_db.items():
        if not data['taken']:
            builder.button(
                text=f"#{num}: {data['desc'][:15]}...",
                callback_data=f"view_active_{num}"
            )
            active_orders = True
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    if not active_orders:
        builder.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="list_orders")
    
    # –û–±—â–∏–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    builder.button(text="üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
    builder.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
    builder.adjust(1)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–∫–∞–∑—ã:" if active_orders else "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º/–æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    try:
        await callback.message.edit_text(
            text,
            reply_markup=builder.as_markup()
        )
    except:
        await callback.message.answer(
            text,
            reply_markup=builder.as_markup()
        )
    
    await callback.answer()

@dp.callback_query(F.data == "my_orders")
async def my_orders(callback: CallbackQuery):
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        user_orders = [
            (num, data) for num, data in orders_db.items() 
            if data['taken'] and data['taken_by'] == callback.from_user.username
        ]
        
        if not user_orders:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑–æ–≤ –Ω–µ—Ç
            keyboard = InlineKeyboardBuilder()
            keyboard.button(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="list_orders")
            keyboard.button(text="üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–Ω–æ–≤–∞", callback_data="my_orders")
            keyboard.button(text="üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")
            keyboard.adjust(1)
            
            await callback.message.edit_text(
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≤–∑—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤",
                reply_markup=keyboard.as_markup()
            )
        else:
            # –ï—Å–ª–∏ –∑–∞–∫–∞–∑—ã –µ—Å—Ç—å
            builder = InlineKeyboardBuilder()
            for num, data in user_orders:
                builder.button(
                    text=f"#{num}: {data['desc'][:15]}...",
                    callback_data=f"view_taken_{num}"
                )
            
            builder.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            builder.adjust(1)
            
            await callback.message.edit_text(
                "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã:",
                reply_markup=builder.as_markup()
            )
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ my_orders: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")
    finally:
        await callback.answer()


@dp.callback_query(F.data.startswith("view_"))
async def view_order(callback: CallbackQuery):
    try:
        parts = callback.data.split("_")
        if len(parts) != 3:
            await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞!")
            return
            
        order_type, order_num = parts[1], parts[2]
        order = orders_db.get(order_num)
        
        
        if not order:
            await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        is_owner = order['taken'] and order['taken_by'] == callback.from_user.username
        
        text = (
            f"üìã <b>–ó–∞–∫–∞–∑ #{order_num}</b>\n\n"
            f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{order['desc']}\n\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {'‚úÖ –í–∑—è—Ç–æ' if order['taken'] else 'üü¢ –î–æ—Å—Ç—É–ø–Ω–æ'}\n"
        )
        
        if order['taken']:
            text += f"üë§ <b>–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:</b> @{order['taken_by']}\n"
            text += f"‚è∞ <b>–í—Ä–µ–º—è:</b> {order['taken_time']}\n"
        
        await callback.message.edit_text(
            text,
            reply_markup=get_order_actions_keyboard(order_num, is_owner),
            parse_mode="HTML"
        )
    except Exception as e:
        logging.error(f"Error in view_order: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ")

@dp.callback_query(F.data.startswith("take_"))
async def take_order(callback: CallbackQuery):
    order_num = callback.data.split("_")[1]
    order = orders_db.get(order_num)
    
    if not order:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    if order['taken']:
        await callback.answer("–≠—Ç–æ—Ç –∑–∞–∫–∞–∑ —É–∂–µ –≤–∑—è—Ç!")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞
    order.update({
        'taken': True,
        'taken_by': callback.from_user.username,
        'taken_time': datetime.now().strftime("%d.%m.%Y %H:%M")
    })
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üßæ –ú–æ–∏ –∑–∞–∫–∞–∑—ã", callback_data="my_orders")
    keyboard.button(text="üìã –°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤", callback_data="list_orders")
    keyboard.adjust(1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.edit_text(
        f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤–∑—è–ª–∏ –∑–∞–∫–∞–∑ #{order_num}!\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{order['desc']}\n\n"
        f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –µ–≥–æ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ú–æ–∏ –∑–∞–∫–∞–∑—ã'",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É (–æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
    await bot.send_message(
        ADMIN_ID,
        f"üì¢ –ó–∞–∫–∞–∑ #{order_num} –≤–∑—è—Ç!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{callback.from_user.username}\n"
        f"‚è∞ –í—Ä–µ–º—è: {order['taken_time']}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order['desc']}"
    )
    await callback.answer()

@dp.callback_query(F.data.startswith("cancel_"))
async def cancel_order(callback: CallbackQuery):
    order_num = callback.data.split("_")[1]
    order = orders_db.get(order_num)
    
    if not order or not order['taken']:
        await callback.answer("–ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –æ—Ç–º–µ–Ω–µ–Ω!")
        return
    
    if order['taken_by'] != callback.from_user.username:
        await callback.answer("–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑!")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    order_desc = order['desc']
    username = order['taken_by']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞
    order.update({
        'taken': False,
        'taken_by': None,
        'taken_time': None
    })
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ö –º–æ–∏–º –∑–∞–∫–∞–∑–∞–º", callback_data="my_orders")
    keyboard.button(text="üìã –ö —Å–ø–∏—Å–∫—É –∑–∞–∫–∞–∑–æ–≤", callback_data="list_orders")
    keyboard.adjust(1)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback.message.edit_text(
        f"‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞–∫–∞–∑ #{order_num}\n\n"
        f"<b>–û–ø–∏—Å–∞–Ω–∏–µ:</b>\n{order_desc}\n\n"
        f"–¢–µ–ø–µ—Ä—å —ç—Ç–æ—Ç –∑–∞–∫–∞–∑ —Å–Ω–æ–≤–∞ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–∑—è—Ç–∏—è.",
        reply_markup=keyboard.as_markup(),
        parse_mode="HTML"
    )
    
    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_ID,
        f"‚ö†Ô∏è –ó–∞–∫–∞–∑ #{order_num} –æ—Ç–º–µ–Ω–µ–Ω!\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{username}\n"
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {order_desc}"
    )
    await callback.answer()

@dp.callback_query(F.data == "back_to_orders")
async def back_to_orders(callback: CallbackQuery):
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –æ—Ç–∫—É–¥–∞ –ø—Ä–∏—à–µ–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å (–∏–∑ "–ú–æ–∏ –∑–∞–∫–∞–∑—ã" –∏–ª–∏ "–°–ø–∏—Å–æ–∫ –∑–∞–∫–∞–∑–æ–≤")
    if "–í–∞—à–∏ –∑–∞–∫–∞–∑—ã" in callback.message.text:
        await my_orders(callback)
    else:
        await list_orders(callback)
@dp.callback_query(F.data == "show_stats")
async def show_stats(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–∫–∏ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤
    active_orders = []
    taken_orders = []
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º —Å–ø–∏—Å–∫–∏ –¥–∞–Ω–Ω—ã–º–∏
    for num, data in orders_db.items():
        if not data['taken']:
            active_orders.append(f"üîπ #{num}: {data['desc']}")
        else:
            taken_info = [
                f"‚úÖ #{num}: {data['desc']}",
                f"üë§ @{data['taken_by']}",
                f"‚è∞ {data['taken_time']}",
                ""  # –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
            ]
            taken_orders.extend(taken_info)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    message_lines = [
        "üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–∫–∞–∑–æ–≤</b>",
        "",
        "üîÑ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:</b>",
    ]
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    if not active_orders:
        message_lines.append("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    else:
        message_lines.extend(active_orders)
    
    message_lines.extend([
        "",
        "‚úîÔ∏è <b>–í–∑—è—Ç—ã–µ –∑–∞–∫–∞–∑—ã:</b>"
    ])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã –∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –∏—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏
    if not taken_orders:
        message_lines.append("–ù–µ—Ç –≤–∑—è—Ç—ã—Ö –∑–∞–∫–∞–∑–æ–≤")
    else:
        message_lines.extend(taken_orders)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard = InlineKeyboardBuilder()
    keyboard.button(text="üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.edit_text(
        "\n".join(message_lines),
        parse_mode="HTML",
        reply_markup=keyboard.as_markup()
    )

@dp.callback_query(F.data == "add_order_prompt")
async def add_order_prompt(callback: CallbackQuery):
    if callback.from_user.id != ADMIN_ID:
        await callback.answer("–¢–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!")
        return
    
    await callback.message.edit_text(
        "–í–≤–µ–¥–∏—Ç–µ –∑–∞–∫–∞–∑ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n"
        "<code>–ù–æ–º–µ—Ä: –û–ø–∏—Å–∞–Ω–∏–µ</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1: –î–æ—Å—Ç–∞–≤–∏—Ç—å –ø–∏—Ü—Ü—É</code>",
        parse_mode="HTML"
    )

@dp.message(F.text.regexp(r"^\d+\s*:.+"))
async def add_order(message: Message):
    if message.from_user.id != ADMIN_ID:
        return
    
    try:
        num, desc = message.text.split(":", 1)
        orders_db[num.strip()] = {
            'desc': desc.strip(),
            'taken': False,
            'taken_by': None,
            'taken_time': None
        }
        await message.answer(
            f"‚úÖ –ó–∞–∫–∞–∑ #{num.strip()} –¥–æ–±–∞–≤–ª–µ–Ω!",
            reply_markup=get_main_keyboard(message.from_user.id)
        )
    except:
        await message.answer("‚ùå –û—à–∏–±–∫–∞. –§–æ—Ä–º–∞—Ç: –ù–æ–º–µ—Ä: –û–ø–∏—Å–∞–Ω–∏–µ")

# ===== –ó–ê–ü–£–°–ö –ë–û–¢–ê =====
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    logging.basicConfig(level=logging.INFO)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏—Ç–µ Ctrl+C")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
